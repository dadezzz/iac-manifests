# SETUP:
#
# Create a .env file with:
#
# - POSTGRES_DB
# - POSTGRES_PASSWORD
# - POSTGRES_USER
# - NEXTCLOUD_ADMIN_USER
# - NEXTCLOUD_ADMIN_PASSWORD
#
# Additional configuration can be edited by running
# `docker compose exec -it nextcloud vi /var/www/html/config/config.php`.

configs:
  caddyfile:
    file: Caddyfile

networks:
  traefik_default:
    external: true

services:
  caddy:
    cap_add:
      - NET_BIND_SERVICE
    cap_drop:
      - ALL
    configs:
      - source: caddyfile
        target: /etc/caddy/Caddyfile
    image: docker.io/library/caddy:2.8.4-alpine@sha256:e97e0e3f8f51be708a9d5fadbbd75e3398c22fc0eecd4b26d48561e3f7daa9eb
    labels:
      traefik.enable: true
      traefik.http.routers.nextcloud.rule: Host(`cloud.zarantonello.dev`)
      traefik.http.services.nextcloud.loadbalancer.server.port: 3000
    networks:
      - default
      - traefik_default
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /config:uid=52892,gid=52892
      - /data:uid=52892,gid=52892
    user: 52892:52892
    volumes:
      - nextcloud:/var/www/html:ro

  nextcloud:
    cap_drop:
      - ALL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      NEXTCLOUD_TRUSTED_DOMAINS: cloud.zarantonello.dev
      OVERWRITECLIURL: http://caddy:3000
      OVERWRITEHOST: cloud.zarantonello.dev
      OVERWRITEPROTOCOL: https
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    image: docker.io/library/nextcloud:30.0.3-fpm-alpine@sha256:36ecddee8c34f8958acdf2f53fb8738aa549a85a913557bb731e2fdfbb49a1f5
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=82,gid=82
    user: 82:82
    volumes:
      - data:/var/www/html/data
      - nextcloud:/var/www/html

  nextcloud_cron:
    depends_on:
      nextcloud:
        condition: service_started
    entrypoint:
      - sh
      - -c
      - while true ; do php -f /var/www/html/cron.php && sleep 300 ; done
    extends:
      service: nextcloud

  # The first time nextcloud runs, it's normal that this service fails. Ensure
  # to install the notify push app inside nextcloud to make this work.

  nextcloud_notify_push:
    depends_on:
      nextcloud:
        condition: service_started
    entrypoint:
      - /var/www/html/custom_apps/notify_push/bin/x86_64/notify_push
      - /var/www/html/config/config.php
    extends:
      service: nextcloud

  postgres:
    cap_drop:
      - ALL
    env_file: .env
    environment:
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - pg_isready
      timeout: 5s
    image: docker.io/library/postgres:17.2-alpine@sha256:e7897baa70dae1968d23d785adb4aeb699175e0bcaae44f98a7083ecb9668b93
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=70,gid=70
      - /var/run/postgresql:uid=70,gid=70
    # User has to be 70, otherwise the container tries to chown the postgres
    # volume but fails due to insufficient permissions.
    user: 70:70
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    cap_drop:
      - ALL
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
    image: docker.io/library/redis:7.4.1-alpine@sha256:c1e88455c85225310bbea54816e9c3f4b5295815e6dbf80c34d40afc6df28275
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 24056:24056
    volumes:
      - redis:/data

volumes:
  data: {}
  nextcloud: {}
  postgres: {}
  redis: {}
