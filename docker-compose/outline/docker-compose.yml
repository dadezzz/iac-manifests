networks:
  traefik_default:
    external: true

services:
  outline:
    cap_drop:
      - ALL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      AWS_REGION: default
      AWS_S3_UPLOAD_BUCKET_NAME: outline
      AWS_S3_UPLOAD_BUCKET_URL: https://s3-prem-0.zarantonello.dev
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DATABASE}
      FILE_STORAGE: s3
      OIDC_AUTH_URI: https://auth.zarantonello.dev/realms/homelab/protocol/openid-connect/auth
      OIDC_DISABLE_REDIRECT: true
      OIDC_DISPLAY_NAME: Keycloak
      OIDC_LOGOUT_URI: https://auth.zarantonello.dev/realms/homelab/protocol/openid-connect/logout
      OIDC_TOKEN_URI: https://auth.zarantonello.dev/realms/homelab/protocol/openid-connect/token
      OIDC_USERINFO_URI: https://auth.zarantonello.dev/realms/homelab/protocol/openid-connect/userinfo
      OIDC_USERNAME_CLAIM: email
      PGSSLMODE: disable
      RATE_LIMITER_ENABLED: true
      REDIS_URL: redis://redis:6379
      SMTP_FROM_EMAIL: Outline <outline@zarantonello.dev>
      SMTP_HOST: smtp.purelymail.com
      SMTP_PORT: 465
      URL: https://docs.zarantonello.dev
    image: docker.io/outlinewiki/outline:0.85.0@sha256:ffe0737c606a2b4e36b79eb850bf2a9e86ea642bea03d08f1abb2286b4ebfcb6
    labels:
      monitoring.collect: true
      traefik.enable: true
      traefik.http.routers.outline.entrypoints: cloudflared
      traefik.http.routers.outline.rule: Host(`docs.zarantonello.dev`)
      traefik.http.routers.outline.service: outline
      traefik.http.services.outline.loadbalancer.server.port: 3000
    networks:
      - default
      - traefik_default
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 21127:21127

  # Recurrent job that runs twice a day.
  outline-cron:
    cap_drop:
      - ALL
    depends_on:
      outline:
        condition: service_started
    entrypoint:
      - sh
      - -c
      - while true ; do wget -q -O /dev/stdout "https://docs.zarantonello.dev/api/cron.daily?token=${UTILS_SECRET}" ; sleep 43200 ; done
    env_file: .env
    image: docker.io/library/busybox:1.37.0-musl@sha256:597bf7e5e8faf26b8efc4cb558eea5dc14d9cc97d5b4c8cdbe6404a7432d5a67
    labels:
      monitoring.collect: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 22219:22219

  postgres:
    cap_drop:
      - ALL
    env_file: .env
    environment:
      # Configures the user used for healthchecking.
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - pg_isready
      timeout: 5s
    image: docker.io/library/postgres:17.5-alpine@sha256:fbe21607052bb5c298674f2fd8cf044a63aa3ddf50b81627f894f91f40f50bcb
    labels:
      monitoring.collect: true
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=70,gid=70
      - /var/run/postgresql:uid=70,gid=70
    # User has to be 70, otherwise the container tries to chown the postgres
    # volume but fails due to insufficient permissions.
    user: 70:70
    volumes:
      - $HOME/volumes/outline/postgres:/var/lib/postgresql/data
      - $HOME/volumes/outline/postgres-dumps:/var/lib/postgresql/dumps

  redis:
    cap_drop:
      - ALL
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
    image: docker.io/library/redis:8.0.3-alpine@sha256:73734b014e53b3067916918b70718ca188c16895511a272a020c9a71084eecda
    labels:
      monitoring.collect: true
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 24056:24056
    volumes:
      - $HOME/volumes/outline/redis:/data
