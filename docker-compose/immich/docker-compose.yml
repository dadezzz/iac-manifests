# Create a .env file with:
#
# POSTGRES_DB=
# POSTGRES_PASSWORD=
# POSTGRES_USER=

networks:
  traefik_default:
    external: true
  vmagent_default:
    external: true

services:
  immich-machine-learning:
    cap_drop:
      - ALL
    image: ghcr.io/immich-app/immich-machine-learning:v1.131.2@sha256:29836cf73146057ac388546021fff3e00c923e22a28587cceb5108a5e537987d
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 8723:8723
    volumes:
      - $HOME/volumes/immich-machine-learning-cache:/cache

  immich-server:
    cap_drop:
      - ALL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      DB_DATABASE_NAME: ${POSTGRES_DB}
      DB_HOSTNAME: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USERNAME: ${POSTGRES_USER}
      IMMICH_TELEMETRY_INCLUDE: all
      REDIS_HOSTNAME: redis
    image: ghcr.io/immich-app/immich-server:v1.131.3@sha256:7e5b6729b12b5e5cc5d98bcc6f7c27f723fabae4ee77696855808ebd5200bbf8
    labels:
      traefik.enable: true
      # The app connects via http, it's less resource intensive and encryption
      # is provided by tailscale anyway.
      traefik.http.routers.immich.entrypoints: https,http
      traefik.http.routers.immich.rule: Host(`photos.zarantonello.net`)
      traefik.http.routers.immich.service: immich
      traefik.http.services.immich.loadbalancer.server.port: 2283
      victoriametrics.job: immich
      victoriametrics.port: 8081
    networks:
      - default
      - traefik_default
      - vmagent_default
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 5551:5551
    volumes:
      - $HOME/volumes/immich-data:/usr/src/app/upload

  postgres:
    cap_drop:
      - ALL
    env_file: .env
    environment:
      # Configures the user used for healthchecking.
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - pg_isready
      timeout: 5s
    image: docker.io/tensorchord/pgvecto-rs:pg16-v0.3.0-rootless@sha256:3c08766716081c81477928ddcc34fbffce0e046ff2b532f4f3419d8e5da639a1
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=70,gid=70
      - /var/run/postgresql:uid=70,gid=70
    # User has to be 70, otherwise the container tries to chown the postgres
    # volume but fails due to insufficient permissions.
    user: 70:70
    volumes:
      - $HOME/volumes/immich-postgres:/var/lib/postgresql/data

  redis:
    cap_drop:
      - ALL
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
    image: docker.io/library/redis:7.4.2-alpine@sha256:02419de7eddf55aa5bcf49efb74e88fa8d931b4d77c07eff8a6b2144472b6952
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 9243:9243
    volumes:
      - $HOME/volumes/immich-redis:/data
