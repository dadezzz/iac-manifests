networks:
  alloy_default:
    external: true
  traefik_default:
    external: true

services:
  machine-learning:
    cap_drop:
      - ALL
    image: ghcr.io/immich-app/immich-machine-learning:v1.134.0@sha256:e157e0fa0d4363b0b6bab1923adab5951bbcdb71cd9016470bc6810dae21d115
    labels:
      monitoring.collect: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 8723:8723
    volumes:
      - $HOME/volumes/immich/machine-learning-cache:/cache

  postgres:
    build:
      dockerfile: postgres.Dockerfile
    cap_drop:
      - ALL
    env_file: .env
    environment:
      # Configures the user used for healthchecking.
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - pg_isready
      timeout: 5s
    labels:
      monitoring.collect: true
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=70,gid=70
      - /var/run/postgresql:uid=70,gid=70
    # User has to be 70, otherwise the container tries to chown the postgres
    # volume but fails due to insufficient permissions.
    user: 70:70
    volumes:
      - $HOME/volumes/immich/postgres:/var/lib/postgresql/data

  redis:
    cap_drop:
      - ALL
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
    image: docker.io/library/redis:8.0.1-alpine@sha256:62b5498c91778f738f0efbf0a6fd5b434011235a3e7b5f2ed4a2c0c63bb1c786
    labels:
      monitoring.collect: true
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 9243:9243
    volumes:
      - $HOME/volumes/immich/redis:/data

  server:
    cap_drop:
      - ALL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      DB_DATABASE_NAME: ${POSTGRES_DB}
      DB_HOSTNAME: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USERNAME: ${POSTGRES_USER}
      IMMICH_TELEMETRY_INCLUDE: all
      REDIS_HOSTNAME: redis
    image: ghcr.io/immich-app/immich-server:v1.134.0@sha256:073fc04c7e3d18ace466c20763809cf17aa55765ed610f12971b392a6a80b50c
    labels:
      monitoring.collect: true
      monitoring.metrics.port: 8081
      traefik.enable: true
      # The app connects via http, it's less resource intensive and encryption
      # is provided by tailscale anyway.
      traefik.http.routers.immich.entrypoints: https,http
      traefik.http.routers.immich.rule: Host(`photos.zarantonello.net`)
      traefik.http.routers.immich.service: immich
      traefik.http.services.immich.loadbalancer.server.port: 2283
    networks:
      - alloy_default
      - default
      - traefik_default
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 5551:5551
    volumes:
      - $HOME/volumes/immich/data:/usr/src/app/upload
