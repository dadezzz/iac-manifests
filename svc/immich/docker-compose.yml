# kics-scan disable=698ed579-b239-4f8f-a388-baa4bcb13ef8

# Create a .env file with:
#
# POSTGRES_DB=
# POSTGRES_PASSWORD=
# POSTGRES_USER=

networks:
  traefik_default:
    external: true

services:
  immich-machine-learning:
    cap_drop:
      - ALL
    image: ghcr.io/immich-app/immich-machine-learning:v1.121.0@sha256:1b8494bb9fe2194f2dc72c4d6b0104e16718f50e8772d54ade57909770816ad1
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /.cache:uid=8723,gid=8723
      - /tmp:uid=8723,gid=8723
    user: 8723:8723
    volumes:
      - machine-learning-cache:/cache

  immich-server:
    cap_drop:
      - ALL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - DB_HOSTNAME=postgres
      - REDIS_HOSTNAME=redis
      - DB_DATABASE_NAME=${POSTGRES_DB}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_USERNAME=${POSTGRES_USER}
    image: ghcr.io/immich-app/immich-server:v1.121.0@sha256:851c02f28891f1854c5b5762ee8d2e254e2de528cfe3627b2fbcb37a7f108ff3
    labels:
      traefik.enable: true
      traefik.http.routers.immich.rule: Host(`photos.zarantonello.net`)
      traefik.http.services.immich.loadbalancer.server.port: 2283
    networks:
      - default
      - traefik_default
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 5551:5551
    volumes:
      - data:/usr/src/app/upload

  postgres:
    cap_drop:
      - ALL
    env_file: .env
    environment:
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - pg_isready
      timeout: 5s
    image: docker.io/tensorchord/pgvecto-rs:pg16-v0.3.0-rootless@sha256:d125f3aec02bfa66764432eae76e1098a3b0c6f8bf13db38f5af1156499c90b5
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=70,gid=70
      - /var/run/postgresql:uid=70,gid=70
    # User has to be 70, otherwise the container tries to chown the postgres
    # volume but fails due to insufficient permissions.
    user: 70:70
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    cap_drop:
      - ALL
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
    image: docker.io/library/redis:7.4.1-alpine@sha256:c1e88455c85225310bbea54816e9c3f4b5295815e6dbf80c34d40afc6df28275
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 9243:9243
    volumes:
      - redis:/data

volumes:
  data: {}
  machine-learning-cache: {}
  postgres: {}
  redis: {}
