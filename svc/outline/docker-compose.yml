# SETUP:
#
# Create a .env file with:
#
# - OIDC_CLIENT_ID
# - OIDC_CLIENT_SECRET
# - POSTGRES_DB
# - POSTGRES_PASSWORD
# - POSTGRES_USER
# - SECRET_KEY
# - SMTP_PASSWORD
# - SMTP_USERNAME
# - UTILS_SECRET

networks:
  traefik_default:
    external: true

services:
  outline:
    cap_drop:
      - ALL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DATABASE}
      FILE_STORAGE: local
      # Creates a redirect loop with cloudflared and traefik and it's not necessary.
      FORCE_HTTPS: false
      OIDC_AUTH_URI: https://auth.zarantonello.dev/api/oidc/authorization
      OIDC_DISABLE_REDIRECT: true
      OIDC_DISPLAY_NAME: Authelia
      OIDC_TOKEN_URI: https://auth.zarantonello.dev/api/oidc/token
      OIDC_USERINFO_URI: https://auth.zarantonello.dev/api/oidc/userinfo
      OIDC_USERNAME_CLAIM: preferred_username
      PGSSLMODE: disable
      RATE_LIMITER_ENABLED: true
      REDIS_URL: redis://redis:6379
      SMTP_FROM_EMAIL: Outline <outline@zarantonello.dev>
      SMTP_HOST: smtp.purelymail.com
      SMTP_PORT: 465
      URL: https://docs.zarantonello.dev
    image: docker.io/outlinewiki/outline:0.81.1@sha256:e539971b59b2523ab54bf792105d1cff6432974a37e18211c175cd053d7feb62
    labels:
      traefik.enable: true
      # TLS is terminated by cloudflared.
      traefik.http.routers.outline.entrypoints: http
      traefik.http.routers.outline.rule: Host(`docs.zarantonello.dev`)
      traefik.http.services.outline.loadbalancer.server.port: 3000
    networks:
      - default
      - traefik_default
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /.yarn:uid=21127,gid=21127
    user: 21127:21127
    volumes:
      - data:/var/lib/outline/data

  # Recurrent job that runs once a day.
  outline-cron:
    cap_drop:
      - ALL
    depends_on:
      outline:
        condition: service_started
    entrypoint:
      - sh
      - -c
      - while true ; do wget "https://docs.zarantonello.dev/api/cron.daily?token=${UTILS_SECRET}" ; sleep 43200 ; done
    env_file: .env
    image: docker.io/library/alpine:3.21.1@sha256:b97e2a89d0b9e4011bb88c02ddf01c544b8c781acf1f4d559e7c8f12f1047ac3
    networks:
      - default
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 22219:22219

  postgres:
    cap_drop:
      - ALL
    env_file: .env
    environment:
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - pg_isready
      timeout: 5s
    image: docker.io/library/postgres:17.2-alpine@sha256:272a3f9b04d2170ce119c509c7706bc5e4b29e05ed5ccf70462b4f01cb556205
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=70,gid=70
      - /var/run/postgresql:uid=70,gid=70
    # User has to be 70, otherwise the container tries to chown the postgres
    # volume but fails due to insufficient permissions.
    user: 70:70
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    cap_drop:
      - ALL
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
    image: docker.io/library/redis:7.4.2-alpine@sha256:86c23b252bbdaa1a867e0e360480de1aaea96e6ab3b1e69743c626c07a2a0c17
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 24056:24056
    volumes:
      - redis:/data

volumes:
  data: {}
  postgres: {}
  redis: {}
