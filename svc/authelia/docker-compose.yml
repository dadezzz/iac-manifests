# SETUP:
#
# Create a users.yml file as described in https://www.authelia.com/reference/guides/passwords/#yaml-format
#
# Create a .env file with:
#
# - GRAFANA_CLIENT_ID
# - GRAFANA_CLIENT_SECRET
# - IMMICH_CLIENT_ID
# - IMMICH_CLIENT_SECRET
# - MINIO_CLIENT_ID
# - MINIO_CLIENT_SECRET
# - OIDC_HMAC_SECRET
# - OIDC_JWKS_PRIVATE_KEY_BASE64
# - OUTLINE_CLIENT_ID
# - OUTLINE_CLIENT_SECRET
# - POSTGRES_DB
# - POSTGRES_PASSWORD
# - POSTGRES_USER
# - SESSION_SECRET
# - SMTP_PASSWORD
# - SMTP_USER
# - STORAGE_ENCRYPTION_KEY

configs:
  authelia:
    file: ./configuration.yml

networks:
  traefik_default:
    external: true
  vmagent_default:
    external: true

secrets:
  authelia-users:
    file: ./users.yml

services:
  authelia:
    cap_drop:
      - ALL
    configs:
      - source: authelia
        target: /config/configuration.yml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      X_AUTHELIA_CONFIG_FILTERS: template
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - /app/healthcheck.sh
      timeout: 5s
    image: docker.io/authelia/authelia:4.38.18@sha256:a5e6fa4b1dbdc296f80f9175157b145a0598690ec8cd4d6e105cd4498fe0c731
    labels:
      traefik.enable: true
      traefik.http.middlewares.authelia.forwardAuth.address: http://authelia:9091/api/authz/forward-auth
      traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders: Remote-User,Remote-Groups,Remote-Email,Remote-Name
      traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader: true
      # TLS is terminated by cloudflared.
      traefik.http.routers.authelia.entrypoints: http
      traefik.http.routers.authelia.rule: Host(`auth.zarantonello.dev`) || Host(`auth.zarantonello.net`)
      traefik.http.services.authelia.loadbalancer.server.port: 9091
      victoriametrics.job: authelia
      victoriametrics.port: 9959
    networks:
      default: {}
      traefik_default:
        aliases:
          - authelia
      vmagent_default: {}
    restart: always
    secrets:
      - authelia-users
    security_opt:
      - no-new-privileges:true
    user: 2154:2154

  postgres:
    cap_drop:
      - ALL
    env_file: .env
    environment:
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - pg_isready
      timeout: 5s
    image: docker.io/library/postgres:17.2-alpine@sha256:272a3f9b04d2170ce119c509c7706bc5e4b29e05ed5ccf70462b4f01cb556205
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:uid=70,gid=70
      - /var/run/postgresql:uid=70,gid=70
    # User has to be 70, otherwise the container tries to chown the postgres
    # volume but fails due to insufficient permissions.
    user: 70:70
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    cap_drop:
      - ALL
    healthcheck:
      interval: 10s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
    image: docker.io/library/redis:7.4.2-alpine@sha256:86c23b252bbdaa1a867e0e360480de1aaea96e6ab3b1e69743c626c07a2a0c17
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 46406:46406
    volumes:
      - redis:/data

volumes:
  postgres: {}
  redis: {}
